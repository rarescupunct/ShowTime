@page "/addbooking"
@rendermode InteractiveServer

@inject IRepositoryBooking repobooking
@inject IRepositoryFestivals repofestivals
@using MudBlazor.Extensions
@using ShowTime.Repositories.Interfaces
@using ShowTime.Models



@if (pickedfestival == null)
{
    <MudContainer>
        <MudText Align="Align.Start">
            Selectati festivalul pentru care doriti sa faceti rezervarea:
        </MudText>
        <MudTable Items="@festivals">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd>
                    <MudButton Color="Color.Success" @onclick="() => pickedfestival = context.ID">Pick Me</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudContainer>
}
else
{
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Email"
                              @bind-Value="model.Email" For="@(() => model.Email)"/>
                <MudDivider/>
                <MudDatePicker Label="Pick a date, any date" @bind-Date="date"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Tertiary" Class="ml-auto">Submit</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
            @if (success)
            {
                <MudText Color="Color.Success">Success</MudText>
                
            }
            else
            {
                <MudText Color="@Color.Error">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <MudText Color="Color.Error">@errorMessage</MudText>
                    }
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudText Typo="Typo.body2" Align="Align.Center">
            Fill out the form correctly to see the success message.
        </MudText>
    </MudItem>
</MudGrid>
</EditForm>
}

@code {
    private IEnumerable<Festival> festivals = new List<Festival>();
    Booking model = new();
    private Guid? pickedfestival;
    string errorMessage = "";
    
    bool success;
    private DateTime? date = DateTime.Today;

    protected override  async Task OnInitializedAsync()
    {
        festivals = await repofestivals.GetAllAsync();
    }

    private async Task OnValidSubmit()
    {
        if (pickedfestival != null)
        {
            var festival = await repofestivals.GetByIdAsync(pickedfestival.Value);
        

            model.FestivalId = pickedfestival.Value;

            if (date >= festival.StartDate && date <= festival.EndDate)
            {
                model.Date = date.Value;
                if (model.Email == null)
                {
                    success = false;
                    errorMessage += "Must provide an e-mail.";
                }
                else
                {
                    await repobooking.AddAsync(model);
                    await repobooking.SaveChangesAsync();
                    success = true;
                    errorMessage = "";
                }
            }
            else
            {
                success = false;
                errorMessage += "Date must be within festival period.";
            }
        }
        else
        {
            success = false;
            errorMessage += "You must pick a festival first.";
        }
        StateHasChanged();
    }

}