@page "/addbooking"
@rendermode InteractiveServer

@inject IRepositoryBooking repobooking
@inject IRepositoryFestivals repofestivals
@using ShowTime.Repositories.Interfaces
@using ShowTime.Models


<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Email"
                              @bind-Value="model.Email" For="@(() => model.Email)"/>
                <MudDivider/>
                <MudTextField Label="Date"
                              @bind-Value="model.Date" For="@(() => model.Date)"/>
                <MudDivider/>
                <MudSelect T="Festival" @bind-Value="pickedfestival" Required="true">
                    @foreach (var festival in Festivals)
                    {
                        <MudSelectItem Value="@festival.Name">@festival.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Tertiary" Class="ml-auto">Submit</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
            @if (success)
            {
                <MudText Color="Color.Success">Success</MudText>
                
            }
            else
            {
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudText Typo="Typo.body2" Align="Align.Center">
            Fill out the form correctly to see the success message.
        </MudText>
    </MudItem>
</MudGrid>
</EditForm>

@code {
    Booking model = new Booking();
    Festival pickedfestival = new Festival();
    private IEnumerable<Festival> Festivals = new List<Festival>();
    bool success;
    
    protected override async Task OnInitializedAsync()
    {
        Festivals = await repofestivals.GetAllAsync();
    }
    
    private async Task OnValidSubmit()
    {
        try
        {
            model.Festival = pickedfestival;
            model.Festival = pickedfestival;
            pickedfestival.Bookings.Add(model);
            repofestivals.Update(pickedfestival);
            await repobooking.AddAsync(model);
            success = true;
        }
        catch
        {
            success = false;
        }
        await repobooking.SaveChangesAsync();
        await repofestivals.SaveChangesAsync();
    }
}