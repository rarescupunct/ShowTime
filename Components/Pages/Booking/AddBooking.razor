@page "/addbooking"
@rendermode InteractiveServer

@inject IRepositoryBooking repobooking
@inject IRepositoryFestivals repofestivals
@using MudBlazor.Extensions
@using ShowTime.Repositories.Interfaces
@using ShowTime.Models



@if (pickedfestival == null)
{
<MudContainer>
    <MudText Align="Align.Start">
        Selectati festivalul pentru care doriti sa faceti rezervarea:
    </MudText>
    <MudTable Items="@festivals">
        <HeaderContent>
            Name
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudButton Color="Color.Success" @onclick="()=>pickedfestival=context">Pick Me</MudButton>
        </RowTemplate>
    </MudTable>
</MudContainer>
}
else
{
<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
<DataAnnotationsValidator/>
<MudGrid>
    <MudItem xs="12" sm="7">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Email"
                              @bind-Value="model.Email" For="@(() => model.Email)"/>
                <MudDivider/>
                <MudDatePicker Label="Pick a date, any date" @bind-Date="date"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Tertiary" Class="ml-auto">Submit</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
            @if (success)
            {
                <MudText Color="Color.Success">Success</MudText>
                
            }
            else
            {
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                </MudText>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudText Typo="Typo.body2" Align="Align.Center">
            Fill out the form correctly to see the success message.
        </MudText>
    </MudItem>
</MudGrid>
</EditForm>
}
@code {
    private IEnumerable<Festival> festivals = new List<Festival>();
    Booking model = new();
    Festival pickedfestival = new();
    
    bool success;
    private DateTime? date = DateTime.Today;

    protected override  async Task OnInitializedAsync()
    {
        festivals = await repofestivals.GetAllAsync();
    }

    private async Task OnValidSubmit()
    {
        if (date < DateTime.Today)
        {
            success = false;
        }
        else
        {
            model.Date = date.Value;
            repobooking.AddAsync(model);
            await repobooking.SaveChangesAsync();
        }
    }
}