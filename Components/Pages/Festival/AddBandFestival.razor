@page "/addbandfestival"
@rendermode InteractiveServer


@using ShowTime.Models
@using ShowTime.Repositories.Interfaces

@inject IRepositoryBand repoband
@inject IRepositoryFestivals repofestivals
@inject IRepositoryBF repobf


@if (pickedfestival == null)
{
    <MudTable Items="@Festivals" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Name</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudButton Color="Color.Success" @onclick="()=>GenerateTableAsync(context)">Pick Me</MudButton>
        </RowTemplate>
    </MudTable>
}
else
{
    <MudTable Items="@Bands" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
            <MudTh>Name</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Name</MudTd>
            <MudButton Color="Color.Success" @onclick="()=>AddBandToFestivalAsync(context)">Add to Festival</MudButton>
        </RowTemplate>
    </MudTable>
    <MudButton Color="Color.Success" @onclick="()=>pickedfestival=null">Back to Festivals</MudButton>
}
@code {
    private Festival pickedfestival;
    private Band pickedband;
    private IEnumerable<Festival> Festivals = new List<Festival>();
    private IEnumerable<Band> Bands = new List<Band>();
    
    
    protected override async Task OnInitializedAsync()
    {
        Festivals = await repofestivals.GetAllAsync();
    }

    private async Task GenerateTableAsync(Festival festival)
    {
        pickedfestival = festival;
        Bands = await repoband.GetAvailableByIdAsync(festival.ID);
    }
    
    private async Task AddBandToFestivalAsync(Band band)
    {
        Console.WriteLine("fuction activated");
        if (band != null && pickedfestival != null)
        {
            await repobf.AddAsync(band.Id, pickedfestival.ID);
        }

        await repobf.SaveChangesAsync();
        StateHasChanged();
    }
}