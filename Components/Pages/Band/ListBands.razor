@page "/listband"
@rendermode InteractiveServer
@using ShowTime.Models
@using ShowTime.Enums
@using ShowTime.Repositories.Interfaces
@inject IRepositoryBand RepositoryBand



    <MudTable Items="@Elements" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Genre</MudTh>
            <MudTh>Update</MudTh>
            <MudTh>Delete</MudTh>
        </HeaderContent>
        <RowTemplate>
            @if(edit != context.Id){
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Location">@context.Genre</MudTd>
            <MudTd DataLabel="Update">
                <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="() => edit = context.Id">Update</MudButton>
            </MudTd>
            <MudTd DataLabel="Delete">
                <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="() => DeleteBandAsync(context)">Delete</MudButton>
            </MudTd>
            }
            else
            {
                <MudTd>
                    <MudTextField @bind-Value="context.Name"/>
                </MudTd>
                <MudTd>
                    <MudSelect T="Genre" @bind-Value="context.Genre">
                        @foreach (var item in Enum.GetValues(typeof(Genre)).Cast<Genre>())
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudButton Color="Color.Tertiary" OnClick="@(() => Save(context))">Save</MudButton>
                <MudButton Color="Color.Error" OnClick="@(() => edit=null)">Cancel</MudButton>
            }
        </RowTemplate>
    </MudTable>

@code {
    private Guid? edit = null;

    
    private IEnumerable<Band> Elements = new List<Band>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await RepositoryBand.GetAllAsync();
    }

    private async void DeleteBandAsync(Band band)
    {
        RepositoryBand.Delete(band);
        await RepositoryBand.SaveChangesAsync();
        Elements = await RepositoryBand.GetAllAsync();
        StateHasChanged();
    }

    private async void Save(Band band)
    {
        RepositoryBand.Update(band);
        await RepositoryBand.SaveChangesAsync();
        Elements = await RepositoryBand.GetAllAsync();
        edit = null;
        StateHasChanged();
    }
}
